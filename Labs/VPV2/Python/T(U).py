# -*- coding: utf-8 -*-
"""vpv2.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1laB2z_K-4t2vUKHihrP6oCXHkIPxmiH9
"""

##############################################################################
#                 USE GOOGLE COLAB TO RUN PROGRAM                            #
#               https://colab.research.google.com/                           #
##############################################################################

import matplotlib.pyplot as plt                         #include libs  <DONT CHANGE>
import matplotlib.ticker as ticker
from scipy.optimize import curve_fit
from IPython.display import display, Math, Latex
import numpy as np
import math as mth

import warnings
warnings.filterwarnings("ignore")

plt.rcParams["font.family"] = "monospace"

def mapping(x, a,b,c):                #Function of approximating give to curve_fit <TO CHANGE!!!>
    return a + b*np.log(x+c)

save_pic = "./graphic.png"

#==================================================================================================
_, ax = plt.subplots(figsize=(11, 11))
ax.xaxis.set_major_locator(ticker.MaxNLocator(10))
ax.xaxis.set_minor_locator(ticker.MaxNLocator(10))
ax.yaxis.set_major_locator(ticker.MaxNLocator(10))
ax.yaxis.set_minor_locator(ticker.MaxNLocator(10))

ax.set_xlabel("Напряжение, В", fontweight="bold")
ax.set_ylabel("Температура, К", fontweight="bold")
ax.set_title("График зависимости температуры термоэлектронов от напряжения накала", fontweight="bold")

plt.grid(color="blue", visible=True, which='major',axis='both',alpha=1, linestyle = ":")
plt.grid(color="blue", visible=True, which='minor',axis='both',alpha=1, linestyle = ":")
#==================================================================================================

#processing data

x = []
y = []

#FILE "data.txt" !!!!!!!!!!!! YOU NEED TO UPLOAD IT TO COLAB <TO CHANGE>

file = open('data.txt', 'r')                 #open file with data
while (line := file.readline()):              # every line have x, y, y1 ...
  s = line.split()
  if (len(s) != 0):
    x.append(float(s[0].replace(',','.')))    #collect in x[] y1[] y2[] with change "," -> "." (if excel)
    y.append(float(s[1].replace(',','.')))

xData = np.array(x, dtype=float)
yData = np.array(y, dtype=float)

init_param = np.array([1.0, 1.0, 1.0])

coeffs,pcov = curve_fit(mapping, xData, yData, init_param)          #give func and our measurements
                                                        #it returns array of aproximating coeffs <CHANGE DEPEND OF FUNC>
y_fit = mapping(xData, *coeffs)

plt.plot(x, y, 'r^', label='')    #triangles with measurments
plt.plot(x, y_fit, color = 'm', label = f"График с аппроксимацией " r'$T = a + b \cdot ln(x + c)$' f", a = {coeffs[0]:.3f}, b = {coeffs[1]:.3f}, c = {coeffs[2]:.3f}") #approximating praphic
                                                                                                                                  #<TO STYLE GRAPHIC>
#========================================================================================

plt.legend()
plt.show()
plt.savefig(save_pic)
file.close()