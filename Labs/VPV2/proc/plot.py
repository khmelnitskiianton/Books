# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r-L3uiKA4FOm3BYA6LwVWFbCiBqgDF-u
"""

import matplotlib.pyplot as plt                         #include libs  <DONT CHANGE>
import matplotlib.ticker as ticker
from scipy.optimize import curve_fit
from IPython.display import display, Math, Latex
import numpy as np
import math as mth
import scipy.special

import warnings
warnings.filterwarnings("ignore")

plt.rcParams["font.family"] = "monospace"

def mapping(x, a, b):                #Function of approximating give to curve_fit <TO CHANGE!!!>
    new_arr = []
    for x_i in x:
        new_arr.append(a*(mth.sqrt(abs(x_i)*abs(b))*mth.exp(-abs(x_i)*abs(b)) + mth.sqrt(mth.pi) * scipy.special.erfc(mth.sqrt(abs(x_i)*abs(b))) / 2))
    return new_arr

def mapping_1(x, a, b):                #Function of approximating give to curve_fit <TO CHANGE!!!>
    new_arr = []
    for x_i in x:
        new_arr.append(a*b*(mth.sqrt(abs(x_i)*abs(b))*mth.exp(-abs(x_i)*abs(b))))
    return new_arr

save_pic = "./graphic.png"

#==================================================================================================
_, ax = plt.subplots(figsize=(12, 12))
ax.xaxis.set_major_locator(ticker.MaxNLocator(10))
ax.xaxis.set_minor_locator(ticker.MaxNLocator(10))
ax.yaxis.set_major_locator(ticker.MaxNLocator(10))
ax.yaxis.set_minor_locator(ticker.MaxNLocator(10))

ax.set_xlabel("Анодное напряжение, В", fontweight="bold")
ax.set_ylabel("Анодный ток, мА", fontweight="bold")
ax.set_title("График зависимости анодного тока от напряжения при напряжениии накала 4.3 В", fontweight="bold")

plt.grid(color="blue", visible=True, which='major',axis='both',alpha=1, linestyle = ":")
plt.grid(color="blue", visible=True, which='minor',axis='both',alpha=1, linestyle = ":")
#==================================================================================================
dy_dx = []
#processing data

x = []
y = []
file = open('data3.3v.txt', 'r')                 #open file with data
while (line := file.readline()):              # every line have x, y, y1 ...
  s = line.split('; ')
  if (len(s) != 0):
    x.append(float(s[0].replace(',','.'))*(-1)) #collect in x[] y1[] y2[] with change "," -> "." (if excel)
    y.append(float(s[1].replace(',','.')))

for i in range(1, len(x)):
  for j in range(len(x) - i):
    if (x[j] > x[j+1]):
      x[j], x[j+1] = x[j+1], x[j]
      y[j], y[j+1] = y[j+1], y[j]


print(x)

z = []
cool_x = []
cool_y = []

for i in range(1, len(x)):
  if (x[i-1] == x[i]):
    z.append(y[i - 1])
    continue
  if (len(z) > 0):
    z.append(y[i - 1])
    cool_x.append(x[i-1])
    cool_y.append(sum(z) / len(z))
    z = []
    continue
  cool_x.append(x[i - 1])
  cool_y.append(y[i - 1])

if (len(z) > 0):
  z.append(y[len(x) - 1])
  cool_x.append(x[len(x)-1])
  cool_y.append(sum(z) / len(z))
  z = []
else:
  cool_x.append(x[len(x) - 1])
  cool_y.append(y[len(x) - 1])

xData = np.array(cool_x, dtype=float)
yData = np.array(cool_y, dtype=float)

dy_dxData = np.array(dy_dx, dtype=float)

init_param = np.array([1.0, 1.0])

covs   = []
coeffs = []
coeffs, covs = curve_fit(mapping, cool_x, cool_y, init_param) #give func and our measurements
print(coeffs)
print(covs)
deviation = np.sqrt(np.diag(covs))

yFitData = mapping(cool_x, *coeffs)  #it returns array of aproximating coeffs <CHANGE DEPEND OF FUNC>

plt.plot(cool_x, cool_y, 'b^') #approximating praphic
plt.plot(cool_x, yFitData, color = 'b', label = f"График с аппроксимацией ", f"a = {coeffs[0]:.3f}" r' +- ' f" {deviation[0]:.4}, b = {coeffs[1]:.3f}" r' +- ' f"{deviation[1]:.4}") #approximating praphic

# yFitData = mapping_1(xData, *coeffs)

x = []
y = []


#=======================================================================================
for i in range(len(cool_x)-1):
  if ((cool_x[i+1]-cool_x[i]) != 0):
    dy_dx.append(float(cool_y[i+1]-cool_y[i])/float(cool_x[i+1]-cool_x[i]))

file2 = open('cool.txt', 'w')                 #open file with data
for i in range(len(cool_x)-1):
  file2.write(str(cool_x[i]) + '\t' + str(cool_y[i]) + '\n')

#plt.plot(cool_x, dy_dx, 'm*', label='')
#========================================================================================

plt.legend()
plt.show()
plt.savefig(save_pic)
file2.close()
file.close()
