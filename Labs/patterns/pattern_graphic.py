# -*- coding: utf-8 -*-
"""pattern_graphic.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cl5WqadfRlPH6TmJoW7wx3bD5Sj1SavF
"""

##############################################################################
#                 USE GOOGLE COLAB TO RUN PROGRAM                            #
#                https://colab.research.google.com/                          #
##############################################################################

import matplotlib.pyplot as plt                         #include libs  <DONT CHANGE>
import matplotlib.ticker as ticker
from scipy.optimize import curve_fit
from IPython.display import display, Math, Latex
import numpy as np
from math import *

plt.rcParams["font.family"] = "monospace"

def mapping(x, k, b):                #Function of approximating give to curve_fit <TO CHANGE!!!>
    return b + k*x

save_pic = "./graphic.png"

#========================================================================================
_, ax = plt.subplots(figsize=(10, 10))
ax.set_xlabel("Подпись оси X", fontweight="bold")
ax.set_ylabel("Подпись оси Y", fontweight="bold")
ax.set_title("Шапка", fontweight="bold")

ax.xaxis.set_major_locator(ticker.MaxNLocator(10))
ax.xaxis.set_minor_locator(ticker.MaxNLocator(10))
ax.yaxis.set_major_locator(ticker.MaxNLocator(10))
ax.yaxis.set_minor_locator(ticker.MaxNLocator(10))

plt.grid(color="blue", visible=True, which='major',axis='both',alpha=1, linestyle = ":")
plt.grid(color="blue", visible=True, which='minor',axis='both',alpha=1, linestyle = ":")
#========================================================================================

#processing data

x = []
y = []

#FILE "data.txt" !!!!!!!!!!!! YOU NEED TO UPLOAD IT TO COLAB <TO CHANGE>

file = open('data.txt', 'r')                 #open file with data
while (line := file.readline()):              # every line have x, y, y1 ...
  s = line.split()
  if (len(s) != 0):
    x.append(float(s[0].replace(',','.')))    #collect in x[] y1[] y2[] with change "," -> "." (if excel)
    y.append(float(s[1].replace(',','.')))

k = 0                                        #create coeffs all in function
b = 0

coeffs,_ = curve_fit(mapping, x, y)          #give func and our measurements
k = coeffs[0]                                   #it returns array of aproximating coeffs <CHANGE DEPEND OF FUNC>
b = coeffs[1]
y_fit = []
for i in range(len(x)):
  y_fit.append(b + k * x[i])                    #with coeffs make array of Approximating data
#                 ^
#                 |
#                 function need to write <TO CHANGE>
#                 """"""""""""""""""""""

plt.plot(x, y, 'r^', label='')    #triangles with measurments
plt.plot(x, y_fit, color = 'y', label = f"Прямая с аппроксимацией " r'$\Delta l = a + k \cdot d$' f", k = {k:.3f}, a = {b:.3f}")
#==========================================================================================

plt.legend()
plt.show()
plt.savefig(save_pic)

##########################################################################################
#                     COUNTING FALLIBILITY DEPEND ON METHOD Least Squares Method         #
#                          ONLY FOR y = kx + b                                           #
##########################################################################################

x_new = []
y_new = []

file = open('data.txt', 'r')
while (line := file.readline()):
  s = line.split()
  if (len(s) != 0):
    x_new.append(float(s[0].replace(',','.')))
    y_new.append(float(s[1].replace(',','.')))

amount = len(x_new)

x_new.sort()
y_new.sort()

summ_xy = 0
summ_x  = 0
summ_y  = 0
summ_x2 = 0
summ_y2 = 0

for i in range(amount):
  summ_xy += x_new[i]*y_new[i]
  summ_x  += x_new[i]
  summ_y  += y_new[i]
  summ_x2 += x_new[i]**2
  summ_y2 += y_new[i]**2

k=0
b=0

k = (summ_xy/amount - summ_x/amount*summ_y/amount)/(summ_x2/amount - (summ_x/amount)**2)

sigma_k = 1/(sqrt(amount))*sqrt(((summ_y2/amount - (summ_y/amount)**2)/(summ_x2/amount - (summ_x/amount)**2))-k**2)

b = summ_y/amount - k*(summ_x/amount)

sigma_b = sigma_k * sqrt(summ_x2/amount)

print("k = ",k)
print("\sigma_k = ", sigma_k)
print("b = ", b)
print("\sigma_b = ", sigma_b)
file.close()
